<?php

function custom_menu() {
  $items['home'] = array(
    'title' => 'Forums Activities',
    'page callback' => 'custom_home',
    'access arguments' => array('access content'),
    'file' => 'custom.pages.inc',
  );
  
  return $items;
}

function custom_theme() {
  return array(
    'custom_forums' => array(
      'template' => 'custom-forums',
      'variables' => array('forums' => NULL, 'topics' => NULL, 'parents' => NULL, 'tid' => NULL, 'sortby' => NULL, 'forum_per_page' => NULL),
    ),
    'custom_forum_topic_list' => array(
      'template' => 'custom-forum-topic-list',
      'variables' => array('tid' => NULL, 'topics' => NULL, 'sortby' => NULL, 'forum_per_page' => NULL),
    ),
    'custom_forum_submitted' => array(
      'template' => 'custom-forum-submitted',
      'variables' => array('topic' => NULL),
    ),
  );
}  

function template_preprocess_custom_forums(&$variables) {
  global $user;    

  $vid = variable_get('forum_nav_vocabulary', 0);
  $vocabulary = taxonomy_vocabulary_load($vid);
  $title = !empty($vocabulary->name) ? $vocabulary->name : '';

  // Breadcrumb navigation:
  $breadcrumb[] = l(t('Home'), NULL);
  if ($variables['tid']) {
    $breadcrumb[] = l($vocabulary->name, 'forum');
  }
  if ($variables['parents']) {
    $variables['parents'] = array_reverse($variables['parents']);
    foreach ($variables['parents'] as $p) {
      if ($p->tid == $variables['tid']) {
        $title = $p->name;
      }
      else {
        $breadcrumb[] = l($p->name, 'forum/' . $p->tid);
      }
    }
  }
  //drupal_set_breadcrumb($breadcrumb);
  //drupal_set_title($title);
  
  if ($variables['forums_defined'] = count($variables['forums']) || count($variables['parents'])) {   
    /*if (!empty($variables['forums'])) {    
      $variables['forums'] = theme('forum_list', $variables);      
    }
    else {    
      $variables['forums'] = '';
    }*/
    
    $variables['forums'] = '';

    /*if ($variables['tid'] && !in_array($variables['tid'], variable_get('forum_containers', array()))) {      
      $variables['topics'] = theme('forum_topic_list', $variables);
      drupal_add_feed('taxonomy/term/' . $variables['tid'] . '/feed', 'RSS - ' . $title);
    }
    else {
      $variables['topics'] = '';
    }*/
                    
    $variables['topics'] = theme('custom_forum_topic_list', $variables);

    // Provide separate template suggestions based on what's being output. Topic id is also accounted for.
    // Check both variables to be safe then the inverse. Forums with topic ID's take precedence.
    if ($variables['forums'] && !$variables['topics']) {
      $variables['theme_hook_suggestions'][] = 'forums__containers';
      $variables['theme_hook_suggestions'][] = 'forums__' . $variables['tid'];
      $variables['theme_hook_suggestions'][] = 'forums__containers__' . $variables['tid'];
    }
    elseif (!$variables['forums'] && $variables['topics']) {
      $variables['theme_hook_suggestions'][] = 'forums__topics';
      $variables['theme_hook_suggestions'][] = 'forums__' . $variables['tid'];
      $variables['theme_hook_suggestions'][] = 'forums__topics__' . $variables['tid'];
    }
    else {                                                  
      $variables['theme_hook_suggestions'][] = 'forums__' . $variables['tid'];
    }

  }
  else {
    drupal_set_title(t('No forums defined'));
    $variables['forums'] = '';
    $variables['topics'] = '';
  }
}

function template_preprocess_custom_forum_topic_list(&$variables) {
  global $forum_topic_list_header;

  // Create the tablesorting header.
  $ts = tablesort_init($forum_topic_list_header);
  $header = '';
  foreach ($forum_topic_list_header as $cell) {
    $cell = tablesort_header($cell, $forum_topic_list_header, $ts);
    $header .= _theme_table_cell($cell, TRUE);
  }
  $variables['header'] = $header;

  if (!empty($variables['topics'])) {
    $row = 0;
    foreach ($variables['topics'] as $id => $topic) {
      //print_r($topic);
      if ($topic->comment_count == 0) {
        $topic->new = 1;
      }
      $variables['topics'][$id]->icon = theme('forum_icon', array('new_posts' => $topic->new, 'num_posts' => $topic->comment_count, 'comment_mode' => $topic->comment_mode, 'sticky' => $topic->sticky, 'first_new' => $topic->first_new));
      $variables['topics'][$id]->zebra = $row % 2 == 0 ? 'odd' : 'even';
      $row++;

      // We keep the actual tid in forum table, if it's different from the
      // current tid then it means the topic appears in two forums, one of
      // them is a shadow copy.
      /*if ($variables['tid'] != $topic->forum_tid) {
        $variables['topics'][$id]->moved = TRUE;
        $variables['topics'][$id]->title = check_plain($topic->title);
        $variables['topics'][$id]->message = l(t('This topic has been moved'), "forum/$topic->forum_tid");
      }
      else {*/
        $variables['topics'][$id]->moved = FALSE;
        $variables['topics'][$id]->title = l($topic->title, "node/$topic->nid");
        $variables['topics'][$id]->message = '';
      /*}*/
      $topic->uid = $topic->last_comment_uid ? $topic->last_comment_uid : $topic->uid;
      $variables['topics'][$id]->created = theme('custom_forum_submitted', array('topic' => $topic));      
      $variables['topics'][$id]->last_reply = theme('custom_forum_submitted', array('topic' => isset($topic->last_reply) ? $topic->last_reply : NULL));

      $variables['topics'][$id]->new_text = '';
      $variables['topics'][$id]->new_url = '';
      if (!isset($topic->new_replies)) {
         $topic->new_replies = 0;
      }
      if ($topic->new_replies) {
        $variables['topics'][$id]->new_text = format_plural($topic->new_replies, '1 new', '@count new');
        $variables['topics'][$id]->new_url = url("node/$topic->nid", array('query' => comment_new_page_count($topic->comment_count, $topic->new_replies, $topic), 'fragment' => 'new'));
      }

    }
  }
  else {
    // Make this safe for the template
    $variables['topics'] = array();
  }
  // Give meaning to $tid for themers. $tid actually stands for term id.
  $variables['topic_id'] = $variables['tid'];
  unset($variables['tid']);

  $variables['pager'] = theme('pager');
}

function custom_block_info() {
  $blocks[0] = array(
    'info' => 'Custom:Forum Active Category',
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks[1] = array(
    'info' => 'Custom:Forum Breadcrumb Node',
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks[2] = array(
    'info' => 'Custom:Forum Author Info',
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks[3] = array(
    'info' => 'Custom:Rate widget',    
  );
	return $blocks;
}

function custom_block_view($delta = 0) {
  switch($delta){
    case 0 :
			$query=db_select('node','n');
			$query->leftJoin('taxonomy_index','ti','n.nid = ti.nid');
			$query->leftJoin('taxonomy_term_data','ttd','ti.tid = ttd.tid');
			$query->addfield('ti','tid','tid');
			$query->addfield('ttd','name','name');
			$query->condition('n.status',1);
			$query->condition('n.type',array('forum'),'IN');
			$query->condition('ttd.vid',2);
			$query->addExpression('COUNT(n.nid)','num_records');
			$query->groupBy('tid');
			$query->groupBy('name');
			$query->orderBy('num_records','DESC');
			$query->range(0, 10);
			$result=$query->execute();
			$arr=array();
			foreach($result as $item){
				$arr[]=l($item->name.'('.$item->num_records.')','forum/'.$item->tid);
			}
			$block['subject'] = '';
      $block['content'] = theme('item_list',array('items' => $arr));
      return $block;
		break;
		case 1:
		  if (arg(0) == 'node' && is_numeric(arg(1))) {
        $nid = arg(1);
        $node = node_load($nid);
        if (_forum_node_check_node_type($node)) {
            $vid = variable_get('forum_nav_vocabulary', 0);
            $vocabulary = taxonomy_vocabulary_load($vid);          
            // Breadcrumb navigation
            $breadcrumb[] = l(t('Home'), NULL);
            $breadcrumb[] = l($vocabulary->name, 'forum');
            if ($parents = taxonomy_get_parents_all($node->forum_tid)) {
              $parents = array_reverse($parents);
              foreach ($parents as $parent) {
                $breadcrumb[] = l($parent->name, 'forum/' . $parent->tid);
              }
            }
            drupal_set_breadcrumb($breadcrumb);
      
          }        
      }		
		break;
		case 2:
		  if (arg(0) == 'node' && is_numeric(arg(1))) {
        $nid = arg(1);
        $node = node_load($nid);
				if($node->type!='forum') break;
        $author = user_load($node->uid);
				$pic = theme_image_style(
					array(
						'style_name' => 'thumbnail',
						'path' => $author->picture->uri,
						'attributes' => array(
							'class' => 'avatar'
						)           
					)
				);
				$name = l($author->name.' - view complete profile','user/'.$author->uid);
				$created = date('d F Y',$node->created);
				$output='';
				$output.="<div class='author-info'>
										<h2 class='block-title'>Author Info</h2>
										<div class='author-picture'>$pic</div>
										<div class='author'>$name</div>
										<div class='node-created'>Posted on : $created</div>
									</div>";
				$output.="<hr>";
				$query=db_select('node','n');
				$query->condition('n.status',1);
				$query->condition('n.type',array('forum'),'IN');
				$query->condition('n.uid',$author->uid);
				$query->addField('n','nid');
				$query->addField('n','title');
				$query->addField('n','created');
				$query->orderBy('n.created','DESC');
				$query->range(0, 5);
				$result=$query->execute();
				$arr=array();
				foreach($result as $item){
					$arr[]=l($item->title,'node/'.$item->nid);
				}
				$output.="<div class='author-recent-node'><h2 class='block-title'>Author Recent Post</h2>".theme('item_list',array('items' => $arr))."</div>";
				$output.="<hr>";
				$query = db_select('comment', 'c');
				$query->innerJoin('node', 'n', 'n.nid = c.nid');
				$query->innerJoin('node_comment_statistics', 'ncs', 'ncs.nid = c.nid');
				$query->addTag('node_access');
				$comments = $query
					->fields('c')
					->condition('ncs.comment_count', 0, '>')
					->condition('c.status', 1)
					->condition('n.status', 1)
					->condition('c.uid',$author->uid)
					->orderBy('ncs.last_comment_timestamp', 'DESC')
					->orderBy('c.cid', 'DESC')
					->range(0, 5)
					->execute()
					->fetchAll();
				$arr=array();
				foreach ($comments as $comment) {
					$arr[] = l($comment->subject, 'comment/' . $comment->cid, array('fragment' => 'comment-' . $comment->cid)) . '&nbsp;<span>' . t('@time ago', array('@time' => format_interval(REQUEST_TIME - $comment->changed))) . '</span>';
				}
				if ($arr) {
					$authorComment = theme('item_list', array('items' => $arr));
				}
				else {
					$authorComment = t('No comments available.');
				}
				$output.="<div class='author-recent-comment'><h2 class='block-title'>Author Recent Comment</h2>$authorComment</div>";
				$block['subject'] = '';
				$block['content'] = $output;
				return $block;
			}
		break;
		case 3:
        if (arg(0) == 'node' && is_numeric(arg(1)) && $node = node_load(arg(1))) {
          rate_node_view($node, 'full');          
          //print_r($node);          
          $block['subject'] = '';
          $block['content'] = $node->content['rate_thumbs_up']['#markup'];
          return $block;
        }
		break;
	}
}

function custom_form_alter(&$form, $form_state, $form_id) {
  global $user;
  
  if ($form_id == 'user_login_block') {
    $form['links']['#access'] = 0;
    //$form['#prefix'] = '<div class="container-inline">';
    //$form['#suffix'] = '</div>';
  }
  
  if ($form_id == 'comment_node_forum_form') {
    $form['field_file']['#collapsible'] = TRUE;
    $form['field_file']['#collapsed'] = TRUE;  
  }
      
  if ($form_id == 'user_register_form' && !((bool) $user->uid)) {
    $form['profile_personal_information']['field_twitter']['#access'] = 0;
    $form['profile_personal_information']['field_facebook']['#access'] = 0;  
    $form['profile_personal_information']['field_personalbio']['#access'] = 0;
    $form['profile_drupal']['field_experience']['#access'] = 0;
  }

}

function template_preprocess_custom_forum_submitted(&$variables) {  
  $variables['author'] = isset($variables['topic']->uid) ? theme('username', array('account' => $variables['topic'])) : '';
  $variables['time'] = isset($variables['topic']->created) ? format_interval(REQUEST_TIME - $variables['topic']->created) : '';
}


function custom_preprocess_node(&$variables) {
//  print_r($variables);
}